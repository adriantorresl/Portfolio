{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww29200\viewh15640\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
var nuevoLeon = estados.filter(ee.Filter.eq('shapeName', 'Nuevo Le\'c3\'b3n')).geometry();\
var gadm = ee.FeatureCollection('WM/geoLab/geoBoundaries/600/ADM2')\
  .filter(ee.Filter.inList('shapeName', ['Monterrey', 'San Nicol\'e1s de los Garza', 'Guadalupe',\
  'Apodaca', 'General Escobedo', 'Santa Catarina',\
  'San Pedro Garza Garc\'eda', 'Ju\'e1rez', 'Garc\'eda', \
  'Pesquer\'eda', 'El Carmen', 'Salinas Victoria', 'Santiago', \
  'Cadereyta Jim\'e9nez']));\
var municipiosAMM = gadm.map(function(feat) \{\
  var inter = feat.geometry().intersection(nuevoLeon, 1);\
  var interArea = inter.area(1).divide(1e6); // en km\'b2\
  return feat.set('interArea_km2', interArea);\
\}).filter(ee.Filter.gt('interArea_km2', 10));\
\
// Ver en el mapa\
Map.centerObject(municipiosAMM, 9);\
Map.addLayer(municipiosAMM, \{color: 'blue'\}, 'Municipios AMM');\
\
// Imagen base PARA CLASIFICACION SUPERVISADA\
var landsat = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\
  .filterBounds(municipiosAMM)\
  .filterDate('2020-01-01', '2023-12-31')\
  .map(function(img) \{\
    var toa = img.select(['SR_B.*']).multiply(0.0000275).add(-0.2);\
    return toa\
    .set('system:time_start', img.get('system:time_start'));\
  \})\
  .median()\
  .clip(municipiosAMM);\
var landsatRaw = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\
  .filterBounds(municipiosAMM)\
  .filterDate('2020-01-01', '2023-12-31');\
\
// Corregimos a TOA y renombramos\
var landsat = landsatRaw.map(function(img) \{\
  var toa = img.select(['SR_B.*']).multiply(0.0000275).add(-0.2);\
  return toa.set('system:time_start', img.get('system:time_start'));\
\});\
\
// Obtener una imagen promedio por mes\
var meses = ee.List.sequence(0, landsat.size().subtract(1));\
var startDate = ee.Date('2020-01-01');\
\
var porMes = ee.ImageCollection(\
  ee.List.sequence(0, 47).map(function(n) \{\
    n = ee.Number(n);\
    var ini = startDate.advance(n, 'month');\
    var fin = ini.advance(1, 'month');\
    var mensual = landsat.filterDate(ini, fin).median();\
    return mensual.set('system:time_start', ini.millis());\
  \})\
);\
\
// Ahora combinamos las 48 im\'e1genes mensuales en una sola mediana final\
var landsatCompuesta = porMes.median().clip(municipiosAMM);\
\
// Calcular \'edndices\
var ndvi = landsatCompuesta.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');\
var ndbi = landsatCompuesta.normalizedDifference(['SR_B6', 'SR_B5']).rename('NDBI');\
var mndwi = landsatCompuesta.normalizedDifference(['SR_B3', 'SR_B6']).rename('MNDWI');\
\
// Imagen final con bandas espectrales e \'edndices\
var image = landsatCompuesta.select(['SR_B3', 'SR_B4', 'SR_B5', 'SR_B6'])\
  .addBands([ndvi, ndbi, mndwi]);\
\
Map.addLayer(image, \{bands: ['SR_B4', 'SR_B3'], min: 0, max: 0.3\}, 'Imagen compuesta');\
//PUNTOS DE ENTRENAMIENTO\
// Combina geometr\'edas manuales y asigna etiquetas\
var noUrbano = ee.FeatureCollection([\
  geometry1.set(\{'class': 0\}),\
  geometry3.set(\{'class': 0\}),\
  geometry5.set(\{'class': 0\}),\
  geometry7.set(\{'class': 0\}),\
  geometry9.set(\{'class': 0\}),\
  geometry11.set(\{'class': 0\}),\
  geometry13.set(\{'class': 0\}),\
  geometry15.set(\{'class': 0\}),\
  geometry17.set(\{'class': 0\}),\
  geometry19.set(\{'class': 0\})\
]);\
\
var urbano = ee.FeatureCollection([\
  geometry2.set(\{'class': 1\}),\
  geometry4.set(\{'class': 1\}),\
  geometry6.set(\{'class': 1\}),\
  geometry8.set(\{'class': 1\}),\
  geometry10.set(\{'class': 1\}),\
  geometry12.set(\{'class': 1\}),\
  geometry14.set(\{'class': 1\}),\
  geometry16.set(\{'class': 1\}),\
  geometry18.set(\{'class': 1\}),\
  geometry20.set(\{'class': 1\})\
]);\
\
var muestras = urbano.merge(noUrbano);\
\
// Extrae valores de las bandas en los puntos de muestra\
var training = image.sampleRegions(\{\
  collection: muestras,\
  properties: ['class'],\
  scale: 90\
\});\
\
//APLICAMOS RANDOMFOREST\
var classifier = ee.Classifier.smileRandomForest(50).train(\{\
  features: training,\
  classProperty: 'class',\
  inputProperties: image.bandNames()\
\});\
\
var clasificacion = image.classify(classifier);\
\
Map.addLayer(clasificacion.updateMask(clasificacion.eq(1)), \
             \{palette: 'red'\}, '\'c1reas urbanas clasificadas');\
}